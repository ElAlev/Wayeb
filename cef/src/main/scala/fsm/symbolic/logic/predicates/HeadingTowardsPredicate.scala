package fsm.symbolic.logic.predicates

import fsm.symbolic.Valuation
import fsm.symbolic.logic.Predicate
import org.locationtech.jts.geom.{Coordinate, GeometryFactory}
import stream.GenericEvent
import utils.StringUtils.list2Str
import utils.SpatialUtils.projectPoint

case class HeadingTowardsPredicate(override val arguments: List[String]) extends Predicate(arguments) {
  /*
  	<coordinates> -4.407797882145266,48.382710198105684,0.0 -4.4085430610266165,48.38941230508402,0.0 -4.410780059125649,48.39596554138243,0.0 -4.414459437657134,48.40222343444966,0.0 -4.419499438923959,48.40804606114769,0.0 -4.425787773966339,48.41330318512496,0.0 -4.433184104401638,48.41787718105243,0.0 -4.441523165405533,48.421665679069655,0.0 -4.450618461165942,48.42458386886374,0.0 -4.46026644995194,48.426566410366696,0.0 -4.4702511236245845,48.427568906943286,0.0 -4.480348876375414,48.42756890694327,0.0 -4.490333550048059,48.426566410366696,0.0 -4.4999815388340565,48.42458386886374,0.0 -4.509076834594467,48.421665679069655,0.0 -4.517415895598361,48.41787718105243,0.0 -4.52481222603366,48.41330318512496,0.0 -4.53110056107604,48.40804606114769,0.0 -4.536140562342865,48.40222343444966,0.0 -4.539819940874351,48.39596554138243,0.0 -4.542056938973382,48.38941230508402,0.0 -4.542802117854734,48.382710198105684,0.0 -4.5420394146395635,48.37600896302291,0.0 -4.539786449315992,48.369458264939745,0.0 -4.536094079424156,48.363204350876714,0.0 -4.531045217000188,48.357386790420925,0.0 -4.524752938359016,48.35213536976702,0.0 -4.517357932293757,48.347567207479194,0.0 -4.509025345957496,48.34378415507323,0.0 -4.499941099863272,48.340870538994864,0.0 -4.4903077539317735,48.338891292916315,0.0 -4.480340015218268,48.33789052065888,0.0 -4.470259984781731,48.33789052065888,0.0 -4.460292246068226,48.338891292916315,0.0 -4.450658900136727,48.34087053899486,0.0 -4.441574654042504,48.34378415507323,0.0 -4.433242067706241,48.3475672074792,0.0 -4.425847061640984,48.35213536976702,0.0 -4.419554782999813,48.357386790420925,0.0 -4.414505920575843,48.363204350876714,0.0 -4.410813550684008,48.369458264939745,0.0 -4.408560585360435,48.37600896302291,0.0 -4.407797882145266,48.382710198105684,0.0</coordinates>
   */

  //val centerLon = arguments(0).toDouble
  //val centerLat = arguments(1).toDouble

  val where: String = arguments(0)

  private val geomfact = new GeometryFactory()

  private val BrestCoordArray: Array[(Double, Double)] = Array[(Double, Double)](
    (-4.407797882145266, 48.382710198105684), (-4.4085430610266165, 48.38941230508402), (-4.410780059125649, 48.39596554138243),
    (-4.414459437657134, 48.40222343444966), (-4.419499438923959, 48.40804606114769), (-4.425787773966339, 48.41330318512496), (-4.433184104401638, 48.41787718105243),
    (-4.441523165405533, 48.421665679069655), (-4.450618461165942, 48.42458386886374), (-4.46026644995194, 48.426566410366696),
    (-4.4702511236245845, 48.427568906943286), (-4.480348876375414, 48.42756890694327), (-4.490333550048059, 48.426566410366696),
    (-4.4999815388340565, 48.42458386886374), (-4.509076834594467, 48.421665679069655), (-4.517415895598361, 48.41787718105243),
    (-4.52481222603366, 48.41330318512496), (-4.53110056107604, 48.40804606114769), (-4.536140562342865, 48.40222343444966),
    (-4.539819940874351, 48.39596554138243), (-4.542056938973382, 48.38941230508402), (-4.542802117854734, 48.382710198105684),
    (-4.5420394146395635, 48.37600896302291), (-4.539786449315992, 48.369458264939745), (-4.536094079424156, 48.363204350876714),
    (-4.531045217000188, 48.357386790420925), (-4.524752938359016, 48.35213536976702), (-4.517357932293757, 48.347567207479194),
    (-4.509025345957496, 48.34378415507323), (-4.499941099863272, 48.340870538994864), (-4.4903077539317735, 48.338891292916315),
    (-4.480340015218268, 48.33789052065888), (-4.470259984781731, 48.33789052065888), (-4.460292246068226, 48.338891292916315),
    (-4.450658900136727, 48.34087053899486), (-4.441574654042504, 48.34378415507323), (-4.433242067706241, 48.3475672074792),
    (-4.425847061640984, 48.35213536976702), (-4.419554782999813, 48.357386790420925), (-4.414505920575843, 48.363204350876714),
    (-4.410813550684008, 48.369458264939745), (-4.408560585360435, 48.37600896302291), (-4.407797882145266, 48.382710198105684)
  )
  private val BrestPoly = geomfact.createPolygon(BrestCoordArray.map(c => new Coordinate(c._1, c._2)))

  private val FishingAreaArray: Array[(Double, Double)] = {
    val area_fn = System.getenv("WAYEB_HOME") + "/data/maritime/static/" + "brest_fishing_areas_110_simplified.txt"
    val source = scala.io.Source.fromFile(area_fn)
    val lines = try source.mkString finally source.close()
    val coords = lines.split(" ").toList.map(f => f.split(",")).map(f => (f(0).toDouble, f(1).toDouble)).toArray
    coords
  }
  private val FishingAreaPoly = geomfact.createPolygon(FishingAreaArray.map(c => new Coordinate(c._1, c._2)))

  override def evaluate(
                         event: GenericEvent,
                         valuation: Valuation
                       ): Boolean = {
    if (event.hasAttribute("lon") & event.hasAttribute("lat") & event.hasAttribute("speed") & event.hasAttribute("heading")) {
      val projectionSeconds = 1 * 3600
      val lon = event.getValueOfMap("lon").toString.toDouble
      val lat = event.getValueOfMap("lat").toString.toDouble
      val speed = event.getValueOfMap("speed").toString.toDouble
      val heading = event.getValueOfMap("heading").toString.toDouble
      val (new_lon, new_lat) = projectPoint(lon, lat, projectionSeconds, speed, heading)
      val lineCoords = Array[Coordinate](new Coordinate(lon, lat), new Coordinate(new_lon, new_lat))
      val line = geomfact.createLineString(lineCoords)
      where match {
        case "BrestPort" => line.intersects(BrestPoly)
        case "FishingArea" => line.intersects(FishingAreaPoly)
        case _ => false
      }
    } else false // in case a RESET event appears

  }

  override def toString: String = "HeadingTowardsPredicate(" + list2Str(arguments, ",") + ")"

}
